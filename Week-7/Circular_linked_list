#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node*link;
};
struct node*head= NULL, *cur, *temp, *t1, *temp1;

struct node* create(){
    int n;
    printf("Enter no.of nodes: ");
    scanf("%d", &n);
    while(n--){
        cur= (struct node*)malloc(sizeof(struct node));
        scanf("%d", &(cur->data));
        if(head == NULL){
            cur->link = cur;
            head= cur;
        }
        else{
            temp= head;
            while(temp->link != head){
                temp= temp->link;
            }
            temp->link= cur;
            cur->link= head;
        }
    }
    return head;
};

struct node*insert_begin(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    temp= head;
    while(temp->link != head){
        temp= temp->link;
    }
    temp->link= cur;
    cur->link= head;
    head= cur;

    return head;
};

struct node*insert_end(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    temp= head;
    while(temp->link != head){
        temp= temp->link;
    }
    temp->link= cur;
    cur->link= head;

    return head;
};

struct node*insert_pos(int pos, int ele){
    int c= 1;
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    temp= head;
    while(c < pos-1){
        temp= temp-> link;
        c++;
    }
    cur-> link = temp-> link;
    temp-> link = cur;
    return head;
    printf("\n");
};

struct node*delete_begin(struct node*head){
    temp= head;
    while(temp->link != head){
        temp= temp->link;
    }
    t1= head;
    temp->link= t1->link;
    head= t1->link;
    printf("%d\n", t1->data);
    free(t1);
    return head;
};

struct node*delete_end(){
    temp= head;
    while(temp-> link != head){
        t1= temp;
        temp= temp->link;
    }
    t1->link= head;
    printf("%d\n", temp->data);
    free(temp);
    return head;
};

struct node*delete_pos(struct node*head, int pos){
    temp= head;
    int c= 1;
    while(c < pos){
        temp1= temp;
        temp= temp-> link;
        c++;
    }
    temp1-> link = temp-> link;
    printf("Deleted element is %d\n", temp-> data);
    free(temp);
    return head;
};

struct node*display(){
    temp= head;
    while(temp->link != head){
        printf("%d -> ", temp->data);
        temp= temp->link;
    }
    printf("%d", temp-> data);
    printf("\n");
};

void reverse_display(struct node*head){
    if(head->link == temp){
        printf("%d", head->data);
    }
    if(head->link != temp){
        reverse_display(head->link);
        printf("%d", head-> data);
    }
    printf("\n");
}

int main(){
    int ch, pos, ele, key;
    while(1){
        printf("1-create\n2-insert_begin\n3-insert_end\n4-insert_pos\n5-delete_begin\n6-delete_end\n7-delete_pos\n8- display\n9-reverse_display\n10-exit");
        printf("\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch(ch){
        case 1:
            head = create();
            break;
        case 2:
            scanf("%d", &ele);
            head= insert_begin(ele);
            break;
        case 3:
            scanf("%d", &ele);
            head= insert_end(ele);
            break;
        case 4:
            printf("Enter position: ");
            scanf("%d", &pos);
            printf("Enter element: ");
            scanf("%d", &ele);
            head= insert_pos(pos,ele);
            break;
        case 5:
            head= delete_begin(head);
            break;
        case 6:
            head = delete_end(head);
            break;
        case 7:
            printf("Enter position: ");
            scanf("%d", &pos);
            head= delete_pos(head,pos);
            break;
        case 8:
            display(head);
            break;
        case 9:
            temp= head;
            reverse_display(head);
            break;
        case 10:
            exit(0);
        }
    }
}

/*OUTPUT

1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 1
Enter no.of nodes: 5
1
2
3
4
5
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 2
6
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 3
7
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 4
Enter position: 4
Enter element: 8
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
6 -> 1 -> 2 -> 8 -> 3 -> 4 -> 5 -> 7
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 5
6
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 6
7
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 7
Enter position: 4
Deleted element is 3
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 8
1 -> 2 -> 8 -> 4 -> 5
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 9
5
4
8
2
1
1-create
2-insert_begin
3-insert_end
4-insert_pos
5-delete_begin
6-delete_end
7-delete_pos
8- display
9-reverse_display
10-exit
Enter your choice: 10

Process returned 0 (0x0)   execution time : 100.970 s
Press any key to continue. */
